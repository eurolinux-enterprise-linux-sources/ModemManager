diff --git a/configure.ac b/configure.ac
index cd7b8eb..0e958b8 100644
--- a/configure.ac
+++ b/configure.ac
@@ -69,6 +69,12 @@ case $with_polkit in
         ;;
 esac
 
+dnl
+dnl Checks for new dbus-glib property access function
+dnl
+AC_CHECK_LIB([dbus-glib-1], [dbus_glib_global_set_disable_legacy_property_access], ac_have_dg_prop="1", ac_have_dg_prop="0")
+AC_DEFINE_UNQUOTED(HAVE_DBUS_GLIB_DISABLE_LEGACY_PROP_ACCESS, $ac_have_dg_prop, [Define if you have a dbus-glib with dbus_glib_global_set_disable_legacy_property_access()])
+
 # PPPD
 AC_CHECK_HEADERS(pppd/pppd.h, have_pppd_headers="yes", have_pppd_headers="no")
 AM_CONDITIONAL(HAVE_PPPD_H, test "x$have_pppd_headers" = "xyes")
diff --git a/src/main.c b/src/main.c
index 6b14288..b3adbca 100644
--- a/src/main.c
+++ b/src/main.c
@@ -191,6 +192,17 @@ main (int argc, char *argv[])
         return -1;
     }
 
+#ifndef HAVE_DBUS_GLIB_DISABLE_LEGACY_PROP_ACCESS
+#error HAVE_DBUS_GLIB_DISABLE_LEGACY_PROP_ACCESS not defined
+#endif
+
+#if HAVE_DBUS_GLIB_DISABLE_LEGACY_PROP_ACCESS
+    /* Ensure that non-exported properties don't leak out, and that the
+     * introspection 'access' permissions are respected.
+     */
+    dbus_glib_global_set_disable_legacy_property_access ();
+#endif
+
     proxy = create_dbus_proxy (bus);
     if (!proxy)
         return -1;
